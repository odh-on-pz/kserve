name: Storage Intializer Docker Publisher

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - manifest-ppc64le-test

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: storage-initializer
  LOCAL_REGISTRY: localhost:5000
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/

  build-amd64:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
         - 5000:5000
        options: >-
         --restart=always
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Wait for registry to be ready
        run: |
          until curl --silent http://${{ env.LOCAL_REGISTRY }}/v2/_catalog; do
            echo "Waiting for the local registry to be ready..."
            sleep 5
          done

      - name: Build and push amd64 image to local registry
        uses: docker/build-push-action@v5
        with:
          context: python
          file: python/storage-initializer.Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ env.LOCAL_REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64

      - name: Verify amd64 image in local registry
        run: |
          curl --silent -f http://${{ env.LOCAL_REGISTRY }}/v2/_catalog

  build-arm64:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
         - 5000:5000
        options: >-
         --restart=always

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Wait for registry to be ready
        run: |
          until curl --silent http://${{ env.LOCAL_REGISTRY }}/v2/_catalog; do
            echo "Waiting for the local registry to be ready..."
            sleep 5
          done
      - name: Build and push arm64 image to local registry
        uses: docker/build-push-action@v5
        with:
          context: python
          file: python/storage-initializer.Dockerfile
          push: true
          platforms: linux/arm64
          tags: ${{ env.LOCAL_REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64

      - name: Verify arm64 image in local registry
        run: |
          curl --silent -f http://${{ env.LOCAL_REGISTRY }}/v2/_catalog

  build-ppc64le:
    runs-on: [self-hosted]
    services:
      registry:
        image: registry:2
        ports:
         - 5000:5000
        options: >-
         --restart=always
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Wait for registry to be ready
        run: |
          until curl --silent http://${{ env.LOCAL_REGISTRY }}/v2/_catalog; do
            echo "Waiting for the local registry to be ready..."
            sleep 5
          done


      - name: Build ppc64le image
        uses: docker/build-push-action@v5
        with:
          context: python
          file: python/storage-initializer.Dockerfile
          push: true
          platforms: linux/ppc64le
          tags: ${{ env.LOCAL_REGISTRY }}/${{ env.IMAGE_NAME }}:latest-ppc64le

      - name: Verify ppc64le image in local registry
        run: |
          curl --silent -f http://${{ env.LOCAL_REGISTRY }}/v2/_catalog

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64, build-ppc64le]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker manifest from local registry images
        run: |
          docker manifest create \
            ${{ env.LOCAL_REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.LOCAL_REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 \
            ${{ env.LOCAL_REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64 \
            ${{ env.LOCAL_REGISTRY }}/${{ env.IMAGE_NAME }}:latest-ppc64le


  push:
    needs: [create-manifest]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Export version variable
        run: |
          IMAGE_ID=kserve/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo VERSION=$VERSION >> $GITHUB_ENV
          echo IMAGE_ID=$IMAGE_ID >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64, linux/arm64/v8
          context: python
          file: python/storage-initializer.Dockerfile
          push: false  # Do not push the image
          tags: ${{ env.IMAGE_ID }}:${{ env.VERSION }}
          # https://github.com/docker/buildx/issues/1533
          provenance: false
