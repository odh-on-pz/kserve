name: Storage Initializer Docker Publisher

on:
  push:
    branches:
      - manifest-ppc64le
    tags:
      - v*
  pull_request:

env:
  IMAGE_NAME: storage-initializer

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build amd64 image
        id: amd64-build
        uses: docker/build-push-action@v5
        with:
          context: python
          file: python/storage-initializer.Dockerfile
          push: false
          platforms: linux/amd64
          tags: kserve/${{ env.IMAGE_NAME }}:latest-amd64

      - name: Save amd64 image
        run: docker save -o kserve-${{ env.IMAGE_NAME }}-latest-amd64.tar kserve/${{ env.IMAGE_NAME }}:latest-amd64

  build-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build arm64 image
        id: arm64-build
        uses: docker/build-push-action@v5
        with:
          context: python
          file: python/storage-initializer.Dockerfile
          push: false
          platforms: linux/arm64
          tags: kserve/${{ env.IMAGE_NAME }}:latest-arm64

      - name: Save arm64 image
        run: docker save -o kserve-${{ env.IMAGE_NAME }}-latest-arm64.tar kserve/${{ env.IMAGE_NAME }}:latest-arm64

  build-ppc64le:
    runs-on: [self-hosted]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ppc64le image
        id: ppc64le-build
        uses: docker/build-push-action@v5
        with:
          context: python
          file: python/storage-initializer.Dockerfile
          push: false
          platforms: linux/ppc64le
          tags: kserve/${{ env.IMAGE_NAME }}:latest-ppc64le

      - name: Save ppc64le image
        run: docker save -o kserve-${{ env.IMAGE_NAME }}-latest-ppc64le.tar kserve/${{ env.IMAGE_NAME }}:latest-ppc64le

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64, build-ppc64le]
    steps:
      - name: Load amd64 image
        run: docker load -i kserve-${{ env.IMAGE_NAME }}-latest-amd64.tar

      - name: Load arm64 image
        run: docker load -i kserve-${{ env.IMAGE_NAME }}-latest-arm64.tar

      - name: Load ppc64le image
        run: docker load -i kserve-${{ env.IMAGE_NAME }}-latest-ppc64le.tar

      - name: Create Docker Manifest
        run: |
          docker manifest create \
            kserve/${{ env.IMAGE_NAME }}:latest \
            kserve/${{ env.IMAGE_NAME }}:latest-amd64 \
            kserve/${{ env.IMAGE_NAME }}:latest-arm64 \
            kserve/${{ env.IMAGE_NAME }}:latest-ppc64le

      - name: Verify Docker Manifest
        run: |
          docker manifest inspect kserve/${{ env.IMAGE_NAME }}:latest

  push:
    needs: [create-manifest]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Export version variable
        run: |
          IMAGE_ID=kserve/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo VERSION=$VERSION >> $GITHUB_ENV
          echo IMAGE_ID=$IMAGE_ID >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64, linux/arm64/v8
          context: python
          file: python/storage-initializer.Dockerfile
          push: false
          tags: ${{ env.IMAGE_ID }}:${{ env.VERSION }}
          provenance: false